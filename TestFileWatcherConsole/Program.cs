//
// Program.cs
//
// Author:
//       Matt Ward <matt.ward@microsoft.com>
//
// Copyright (c) 2019 Microsoft Corporation
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
using System;
using System.IO;

namespace TestFileWatcherConsole
{
	class MainClass
	{
		static FileSystemWatcher watcher;

		public static void Main (string[] args)
		{
			string path = Environment.CurrentDirectory;
			if (args.Length > 0) {
				path = args [0];
			}

			WatchFiles (path);

			Console.WriteLine ("Watching files...");
			Console.WriteLine ("Press a key to quit.");
			Console.ReadKey ();
		}

		static void WatchFiles (string path)
		{
			watcher = new FileSystemWatcher (path) {
				// Need LastWrite otherwise no file change events are generated by the native file watcher.
				NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,
				IncludeSubdirectories = true,
				InternalBufferSize = 32768
			};

			watcher.Changed += OnFileChanged;
			watcher.Created += OnFileCreated;
			watcher.Deleted += OnFileDeleted;
			watcher.Renamed += OnFileRenamed;
			watcher.Error += OnFileWatcherError;

			watcher.EnableRaisingEvents = true;
		}

		static void OnFileChanged (object sender, FileSystemEventArgs e)
		{
			Console.WriteLine ("FileChanged: {0}", e.FullPath);
		}

		static void OnFileCreated (object sender, FileSystemEventArgs e)
		{
			Console.WriteLine ("FileCreated: {0}", e.FullPath);
		}

		static void OnFileDeleted (object sender, FileSystemEventArgs e)
		{
			Console.WriteLine ("FileDeleted: {0}", e.FullPath);
		}

		static void OnFileRenamed (object sender, RenamedEventArgs e)
		{
			Console.WriteLine ("FileRenamed: {0} -> {1}", e.OldFullPath, e.FullPath);
		}

		static void OnFileWatcherError (object sender, ErrorEventArgs e)
		{
			Console.WriteLine ("FileWatcher error: {0}", e.GetException ());
		}
	}
}
